// Prisma schema for the personal-website project
// Database: PostgreSQL for production, SQLite for development

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

// Roles in the system
enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
  REQUESTER
}

enum MediaKind {
  LOGO
  BACKGROUND
  GALLERY
  PRODUCT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  phone         String?
  role          Role      @default(REQUESTER)
  passwordHash  String?
  emailVerified DateTime?

  // Relations
  accounts         Account[]
  sessions         Session[]
  customers        Customer[]        @relation("UserCustomers")
  invoices         Invoice[]
  journals         Journal[]
  purchaseRequests PurchaseRequest[] @relation("UserPurchaseRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
  @@index([date])
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  owner     User      @relation("UserCustomers", fields: [ownerId], references: [id])
  ownerId   String
  invoices  Invoice[]
  totalDebt Decimal   @default(0)

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  journals         Journal[]
  purchaseRequests PurchaseRequest[] @relation("CustomerPurchaseRequests")

  @@index([ownerId, name])
  @@index([name])
}

model Product {
  id           String                @id @default(cuid())
  name         String                @unique
  capacity     String
  price        Decimal
  stockQty     Int                   @default(0)
  notes        String?
  images       Media[]
  invoiceItems InvoiceItem[]
  requestItems PurchaseRequestItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id         String        @id @default(cuid())
  serial     String        @unique
  date       DateTime      @default(now())
  customer   Customer      @relation(fields: [customerId], references: [id])
  customerId String
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  items      InvoiceItem[]
  total      Decimal
  collection Decimal       @default(0)
  balance    Decimal

  journalEntries Journal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  capacity  String
  price     Decimal
  quantity  Int
  total     Decimal

  @@index([invoiceId])
  @@index([productId])
}

model Journal {
  id         String   @id @default(cuid())
  date       DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId  String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  total      Decimal
  collection Decimal
  balance    Decimal

  createdAt DateTime @default(now())
}

model Media {
  id          String    @id @default(cuid())
  url         String
  kind        MediaKind @default(GALLERY)
  blurDataUrl String?
  product     Product?  @relation(fields: [productId], references: [id])
  productId   String?

  createdAt DateTime @default(now())
}

model PurchaseRequest {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  status      RequestStatus         @default(PENDING)
  requester   User                  @relation("UserPurchaseRequests", fields: [requesterId], references: [id])
  requesterId String
  customer    Customer?             @relation("CustomerPurchaseRequests", fields: [customerId], references: [id])
  customerId  String?
  items       PurchaseRequestItem[]
  note        String?
}

model PurchaseRequestItem {
  id             String          @id @default(cuid())
  request        PurchaseRequest @relation(fields: [requestId], references: [id])
  requestId      String
  product        Product         @relation(fields: [productId], references: [id])
  productId      String
  quantity       Int
  priceAtRequest Decimal
}

// NextAuth models (from Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
